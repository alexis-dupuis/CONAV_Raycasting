#include <fstream>
#include <iostream>
#include "vec3.h" //already in ray.h
#include "ray.h" //already in hitable.h which is in sphere.h and hitable_list.h
#include "sphere.h"
#include "hitable_list.h"
#include "float.h" //for FLT_MAX

using namespace std;


// float/*Ch4: bool*/ hit_sphere(const vec3& center, float radius, const ray& r){
	
	// vec3 oc = r.origin() - center;
	
	// float a = dot( r.direction(), r.direction() );
	// float b = 2.0 * dot( oc, r.direction() );
	// float c = dot( oc, oc ) - radius*radius;
	
	// float discriminant = b*b - 4*a*c;
	
	// /* //Chapter 4:
	// return (discriminant > 0); */
	
	//Chapter 5:
	// if (discriminant < 0){
		// return -1.0; // no contact point...
	// }
	// else{
		// return (-b - sqrt(discriminant) ) / (2.0*a); // the ray/sphere contact point (the closest one)
	// }
// }


vec3 color(const ray& r, hitable *world){
	
	/* //Chapter 4:
	if( hit_sphere( vec3(0,0,-1), 0.5, r) ){ //sphere of radius 0.5 centered in (0,0,-1)
		return vec3(1,0,0); //red pixel (for a red sphere)
	}*/
	
	/* //Chapter 5.1:
	float t = hit_sphere( vec3(0,0,-1), 0.5, r );
	if( t > 0.0 ){
		vec3 N = unit_vector( r.point_at_parameter(t) - vec3(0,0,-1) ); //normal to the sphere at p(t)
		return 0.5*vec3( N.x()+1, N.y()+1, N.z()+1 ); //mapped to [0,1] and used as a color for illustration purposes
	}
	*/
	
	//Chapter 5.2:
	hit_record rec;
	if( world->hit( r, 0.0, FLT_MAX, rec ) ){
		return 0.5*vec3(rec.normal.x()+1, rec.normal.y()+1, rec.normal.z()+1); //mapped to [0,1] to make a color
	}
	
	else{ //lerp
		vec3 unit_direction = unit_vector(r.direction());
		float t = 0.5*(unit_direction.y() + 1.0);
		return (1.0-t)*vec3(1.0, 1.0, 1.0) + t*vec3(0.5, 0.7, 1.0);
	}
}

int main(){

	//image file...
	ofstream outfile;
	outfile.open("../output/multi_spheres.ppm", ios::out); // opens (and creates if non-existent) for output
	if( outfile.is_open() ){
		cout << "Image file opened. \n";
	}
	else{
		cout << "Error opening or creating image file. \n";
	}

	//image dimensions
	int nx = 200;
	int ny = 100;
	
	outfile << "P3\n" << nx << " " << ny << "\n255\n";
	
	//Camera vectors
	vec3 lower_left_corner( -2.0, -1.0, -1.0 );
	vec3 horizontal( 4.0, 0.0, 0.0 );
	vec3 vertical( 0.0, 2.0, 0.0);
	vec3 origin( 0.0, 0.0, 0.0);

	//Chapter 4+ //Hitables
	hitable *list[2];
	list[0] = new sphere(vec3(0,0,-1), 0.5);
	list[1] = new sphere(vec3(0,-100.5,-1), 100);
	hitable *world = new hitable_list(list,2); //2 spheres...
	
	//rendering loop
	for( int j = ny-1; j >= 0; j-- ){
		for( int i = 0; i < nx; i++ ){
			
			/* //Chapter 1:
			float r = float(i) / float(nx);
			float g = float(j) / float(ny);
			float b = 0.2;
			
			int ir = int(255.99 * r);
			int ig = int(255.99 * g);
			int ib = int(255.99 * b);
			*/
			
			/*//Chapter 2:
			vec3 col( float(i) / float(nx), float(j) / float(ny), 0.2);
			*/
			
			float u = float(i) / float(nx);
			float v = float(j) / float(ny);
			ray r( origin, lower_left_corner + u*horizontal + v*vertical );
			
			/* //Chapter 3-4-5.1:
			vec3 col = color(r);*/
			
			//Chapter 5.2:
			vec3 p = r.point_at_parameter(2.0); //??
			vec3 col = color(r, world);
			
			
			int ir = int(255.99 * col[0]);
			int ig = int(255.99 * col[1]);
			int ib = int(255.99 * col[2]);
			
			outfile << ir << " " << ig << " " << ib << "\n";
		}
	}
	
	outfile.close();// closes file;
	return 0;
}
